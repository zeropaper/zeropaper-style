import styles from '../styles/Home.module.css'
// import type { NextPage } from 'next'
import Head from 'next/head'
import { useTina } from 'tinacms/dist/edit-state'

import { ExperimentalGetTinaClient } from '../.tina/__generated__/types'
// import { Blocks } from '../components/Blocks'
import Grid from '../components/Grid'
import Ory from '../components/Ory'
import { useOryKratos } from '../contexts/Ory'

export type AsyncReturnType<T extends (...args: any) => Promise<any>> =
  T extends (...args: any) => Promise<infer R> ? R : any

const Home = (props: AsyncReturnType<typeof getStaticProps>['props']) => {
  const tinaData = useTina({
    query: props.query,
    data: props.data,
    variables: props.vars
  })
  const data = tinaData.data?.getPageDocument?.data || {}
  const { session } = useOryKratos()

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          {session ? (
            <>
              You are signed in using <a href="https://www.ory.sh/">Ory</a>!
            </>
          ) : (
            <>
              Add Auth to <a href={'https://nextjs.org'}>Next.js</a> with{' '}
              <a href="https://www.ory.sh/">Ory</a>!
            </>
          )}
          Welcome
        </h1>

        <Ory />

        <Grid blocks={data.blocks || []} />

        {session ? (
          <div className={styles.session}>
            <>
              <p>Find your session details below. </p>
              <pre className={styles.pre + ' ' + styles.code}>
                <code data-testid={'session-content'}>
                  {JSON.stringify(session, null, 2)}
                </code>
              </pre>
            </>
          </div>
        ) : null}
      </main>
    </div>
  )
}

export default Home

// Data Fetching
export const getStaticProps = async function () {
  const client = ExperimentalGetTinaClient()
  const vars = { relativePath: 'home.json' }
  const res = await client.getPageDocument(vars)
  return {
    props: {
      query: res.query,
      data: res.data,
      vars
    }
  }
}
