# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
  getDocumentFields: JSON!
  getLandingPageDocument(relativePath: String): LandingPageDocument!
  getLandingPageList(before: String, after: String, first: Float, last: Float, sort: String): LandingPageConnection!
  getPageDocument(relativePath: String): PageDocument!
  getPageList(before: String, after: String, first: Float, last: Float, sort: String): PageConnection!
  getTagDocument(relativePath: String): TagDocument!
  getTagList(before: String, after: String, first: Float, last: Float, sort: String): TagConnection!
  getStuffDocument(relativePath: String): StuffDocument!
  getStuffList(before: String, after: String, first: Float, last: Float, sort: String): StuffConnection!
  getPostDocument(relativePath: String): PostDocument!
  getPostList(before: String, after: String, first: Float, last: Float, sort: String): PostConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = LandingPageDocument | PageDocument | TagDocument | StuffDocument | PostDocument

type LandingPageBlocksHero {
  href: String
  title: String
  description: String
}

type LandingPageBlocksFeatureDeco {
  slant: Boolean
  background: String
}

type LandingPageBlocksFeature {
  href: String
  title: String
  description: String
  deco: LandingPageBlocksFeatureDeco
}

union LandingPageBlocks = LandingPageBlocksHero | LandingPageBlocksFeature

type LandingPage {
  title: String
  description: String
  published: Boolean
  blocks: [LandingPageBlocks]
}

type LandingPageDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: LandingPage!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type LandingPageConnectionEdges {
  cursor: String
  node: LandingPageDocument
}

type LandingPageConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [LandingPageConnectionEdges]
}

type Page {
  title: String
  description: String
  published: Boolean
  body: JSON
}

type PageDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Page!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PageConnectionEdges {
  cursor: String
  node: PageDocument
}

type PageConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Tag {
  name: String
  slug: String
  description: String
}

type TagDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Tag!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type TagConnectionEdges {
  cursor: String
  node: TagDocument
}

type TagConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [TagConnectionEdges]
}

type Stuff {
  title: String
  description: String
  published: Boolean
  slug: String
  date: String
  tags: [String]
  iframe: String
  source: String
  body: JSON
}

type StuffDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Stuff!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type StuffConnectionEdges {
  cursor: String
  node: StuffDocument
}

type StuffConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [StuffConnectionEdges]
}

type Post {
  title: String
  description: String
  published: Boolean
  slug: String
  tags: [String]
  date: String
  body: JSON
}

type PostDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Post!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostConnectionEdges {
  cursor: String
  node: PostDocument
}

type PostConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateLandingPageDocument(relativePath: String!, params: LandingPageMutation!): LandingPageDocument!
  createLandingPageDocument(relativePath: String!, params: LandingPageMutation!): LandingPageDocument!
  updatePageDocument(relativePath: String!, params: PageMutation!): PageDocument!
  createPageDocument(relativePath: String!, params: PageMutation!): PageDocument!
  updateTagDocument(relativePath: String!, params: TagMutation!): TagDocument!
  createTagDocument(relativePath: String!, params: TagMutation!): TagDocument!
  updateStuffDocument(relativePath: String!, params: StuffMutation!): StuffDocument!
  createStuffDocument(relativePath: String!, params: StuffMutation!): StuffDocument!
  updatePostDocument(relativePath: String!, params: PostMutation!): PostDocument!
  createPostDocument(relativePath: String!, params: PostMutation!): PostDocument!
}

input DocumentMutation {
  landingPage: LandingPageMutation
  page: PageMutation
  tag: TagMutation
  stuff: StuffMutation
  post: PostMutation
}

input LandingPageBlocksHeroMutation {
  href: String
  title: String
  description: String
}

input LandingPageBlocksFeatureDecoMutation {
  slant: Boolean
  background: String
}

input LandingPageBlocksFeatureMutation {
  href: String
  title: String
  description: String
  deco: LandingPageBlocksFeatureDecoMutation
}

input LandingPageBlocksMutation {
  hero: LandingPageBlocksHeroMutation
  feature: LandingPageBlocksFeatureMutation
}

input LandingPageMutation {
  title: String
  description: String
  published: Boolean
  blocks: [LandingPageBlocksMutation]
}

input PageMutation {
  title: String
  description: String
  published: Boolean
  body: JSON
}

input TagMutation {
  name: String
  slug: String
  description: String
}

input StuffMutation {
  title: String
  description: String
  published: Boolean
  slug: String
  date: String
  tags: [String]
  iframe: String
  source: String
  body: JSON
}

input PostMutation {
  title: String
  description: String
  published: Boolean
  slug: String
  tags: [String]
  date: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  