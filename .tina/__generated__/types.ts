//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  global: Global;
  globalConnection: GlobalConnection;
  landingPage: LandingPage;
  landingPageConnection: LandingPageConnection;
  page: Page;
  pageConnection: PageConnection;
  tag: Tag;
  tagConnection: TagConnection;
  stuff: Stuff;
  stuffConnection: StuffConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGlobalArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGlobalConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<GlobalFilter>;
};


export type QueryLandingPageArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryLandingPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<LandingPageFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryTagArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryTagConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<TagFilter>;
};


export type QueryStuffArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryStuffConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<StuffFilter>;
};

export type DocumentFilter = {
  global?: InputMaybe<GlobalFilter>;
  landingPage?: InputMaybe<LandingPageFilter>;
  page?: InputMaybe<PageFilter>;
  tag?: InputMaybe<TagFilter>;
  stuff?: InputMaybe<StuffFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
};

export type DocumentNode = Global | LandingPage | Page | Tag | Stuff;

export type GlobalHeader = {
  __typename?: 'GlobalHeader';
  title?: Maybe<Scalars['String']>;
  linkTitle?: Maybe<Scalars['String']>;
};

export type GlobalFooter = {
  __typename?: 'GlobalFooter';
  hideSocialNetworks?: Maybe<Scalars['Boolean']>;
};

export type GlobalMenuLinks = {
  __typename?: 'GlobalMenuLinks';
  href?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
};

export type GlobalMenu = {
  __typename?: 'GlobalMenu';
  links?: Maybe<Array<Maybe<GlobalMenuLinks>>>;
};

export type Global = Node & Document & {
  __typename?: 'Global';
  header?: Maybe<GlobalHeader>;
  footer?: Maybe<GlobalFooter>;
  menu?: Maybe<GlobalMenu>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type GlobalHeaderFilter = {
  title?: InputMaybe<StringFilter>;
  linkTitle?: InputMaybe<StringFilter>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type GlobalFooterFilter = {
  hideSocialNetworks?: InputMaybe<BooleanFilter>;
};

export type GlobalMenuLinksFilter = {
  href?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
};

export type GlobalMenuFilter = {
  links?: InputMaybe<GlobalMenuLinksFilter>;
};

export type GlobalFilter = {
  header?: InputMaybe<GlobalHeaderFilter>;
  footer?: InputMaybe<GlobalFooterFilter>;
  menu?: InputMaybe<GlobalMenuFilter>;
};

export type GlobalConnectionEdges = {
  __typename?: 'GlobalConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Global>;
};

export type GlobalConnection = Connection & {
  __typename?: 'GlobalConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<GlobalConnectionEdges>>>;
};

export type LandingPageBlocksHero = {
  __typename?: 'LandingPageBlocksHero';
  href?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
};

export type LandingPageBlocksFeatureDeco = {
  __typename?: 'LandingPageBlocksFeatureDeco';
  slant?: Maybe<Scalars['Boolean']>;
  background?: Maybe<Scalars['String']>;
};

export type LandingPageBlocksFeature = {
  __typename?: 'LandingPageBlocksFeature';
  href?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  deco?: Maybe<LandingPageBlocksFeatureDeco>;
};

export type LandingPageBlocks = LandingPageBlocksHero | LandingPageBlocksFeature;

export type LandingPage = Node & Document & {
  __typename?: 'LandingPage';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  blocks?: Maybe<Array<Maybe<LandingPageBlocks>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type LandingPageBlocksHeroFilter = {
  href?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type LandingPageBlocksFeatureDecoFilter = {
  slant?: InputMaybe<BooleanFilter>;
  background?: InputMaybe<StringFilter>;
};

export type LandingPageBlocksFeatureFilter = {
  href?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  deco?: InputMaybe<LandingPageBlocksFeatureDecoFilter>;
};

export type LandingPageBlocksFilter = {
  hero?: InputMaybe<LandingPageBlocksHeroFilter>;
  feature?: InputMaybe<LandingPageBlocksFeatureFilter>;
};

export type LandingPageFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  published?: InputMaybe<BooleanFilter>;
  blocks?: InputMaybe<LandingPageBlocksFilter>;
};

export type LandingPageConnectionEdges = {
  __typename?: 'LandingPageConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<LandingPage>;
};

export type LandingPageConnection = Connection & {
  __typename?: 'LandingPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<LandingPageConnectionEdges>>>;
};

export type Page = Node & Document & {
  __typename?: 'Page';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type PageFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  published?: InputMaybe<BooleanFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Tag = Node & Document & {
  __typename?: 'Tag';
  name?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type TagFilter = {
  name?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type TagConnectionEdges = {
  __typename?: 'TagConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Tag>;
};

export type TagConnection = Connection & {
  __typename?: 'TagConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<TagConnectionEdges>>>;
};

export type Stuff = Node & Document & {
  __typename?: 'Stuff';
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  slug?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  picture?: Maybe<Scalars['String']>;
  iframe?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type StuffFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  published?: InputMaybe<BooleanFilter>;
  slug?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  tags?: InputMaybe<StringFilter>;
  picture?: InputMaybe<ImageFilter>;
  iframe?: InputMaybe<StringFilter>;
  source?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type StuffConnectionEdges = {
  __typename?: 'StuffConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Stuff>;
};

export type StuffConnection = Connection & {
  __typename?: 'StuffConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<StuffConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateGlobal: Global;
  createGlobal: Global;
  updateLandingPage: LandingPage;
  createLandingPage: LandingPage;
  updatePage: Page;
  createPage: Page;
  updateTag: Tag;
  createTag: Tag;
  updateStuff: Stuff;
  createStuff: Stuff;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateGlobalArgs = {
  relativePath: Scalars['String'];
  params: GlobalMutation;
};


export type MutationCreateGlobalArgs = {
  relativePath: Scalars['String'];
  params: GlobalMutation;
};


export type MutationUpdateLandingPageArgs = {
  relativePath: Scalars['String'];
  params: LandingPageMutation;
};


export type MutationCreateLandingPageArgs = {
  relativePath: Scalars['String'];
  params: LandingPageMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationUpdateTagArgs = {
  relativePath: Scalars['String'];
  params: TagMutation;
};


export type MutationCreateTagArgs = {
  relativePath: Scalars['String'];
  params: TagMutation;
};


export type MutationUpdateStuffArgs = {
  relativePath: Scalars['String'];
  params: StuffMutation;
};


export type MutationCreateStuffArgs = {
  relativePath: Scalars['String'];
  params: StuffMutation;
};

export type DocumentMutation = {
  global?: InputMaybe<GlobalMutation>;
  landingPage?: InputMaybe<LandingPageMutation>;
  page?: InputMaybe<PageMutation>;
  tag?: InputMaybe<TagMutation>;
  stuff?: InputMaybe<StuffMutation>;
};

export type GlobalHeaderMutation = {
  title?: InputMaybe<Scalars['String']>;
  linkTitle?: InputMaybe<Scalars['String']>;
};

export type GlobalFooterMutation = {
  hideSocialNetworks?: InputMaybe<Scalars['Boolean']>;
};

export type GlobalMenuLinksMutation = {
  href?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
};

export type GlobalMenuMutation = {
  links?: InputMaybe<Array<InputMaybe<GlobalMenuLinksMutation>>>;
};

export type GlobalMutation = {
  header?: InputMaybe<GlobalHeaderMutation>;
  footer?: InputMaybe<GlobalFooterMutation>;
  menu?: InputMaybe<GlobalMenuMutation>;
};

export type LandingPageBlocksHeroMutation = {
  href?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
};

export type LandingPageBlocksFeatureDecoMutation = {
  slant?: InputMaybe<Scalars['Boolean']>;
  background?: InputMaybe<Scalars['String']>;
};

export type LandingPageBlocksFeatureMutation = {
  href?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  deco?: InputMaybe<LandingPageBlocksFeatureDecoMutation>;
};

export type LandingPageBlocksMutation = {
  hero?: InputMaybe<LandingPageBlocksHeroMutation>;
  feature?: InputMaybe<LandingPageBlocksFeatureMutation>;
};

export type LandingPageMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  published?: InputMaybe<Scalars['Boolean']>;
  blocks?: InputMaybe<Array<InputMaybe<LandingPageBlocksMutation>>>;
};

export type PageMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  published?: InputMaybe<Scalars['Boolean']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type TagMutation = {
  name?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
};

export type StuffMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  published?: InputMaybe<Scalars['Boolean']>;
  slug?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  picture?: InputMaybe<Scalars['String']>;
  iframe?: InputMaybe<Scalars['String']>;
  source?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type GlobalPartsFragment = { __typename?: 'Global', header?: { __typename: 'GlobalHeader', title?: string | null, linkTitle?: string | null } | null, footer?: { __typename: 'GlobalFooter', hideSocialNetworks?: boolean | null } | null, menu?: { __typename: 'GlobalMenu', links?: Array<{ __typename: 'GlobalMenuLinks', href?: string | null, label?: string | null } | null> | null } | null };

export type LandingPagePartsFragment = { __typename?: 'LandingPage', title?: string | null, description?: string | null, published?: boolean | null, blocks?: Array<{ __typename: 'LandingPageBlocksHero', href?: string | null, title?: string | null, description?: string | null } | { __typename: 'LandingPageBlocksFeature', href?: string | null, title?: string | null, description?: string | null, deco?: { __typename: 'LandingPageBlocksFeatureDeco', slant?: boolean | null, background?: string | null } | null } | null> | null };

export type PagePartsFragment = { __typename?: 'Page', title?: string | null, description?: string | null, published?: boolean | null, body?: any | null };

export type TagPartsFragment = { __typename?: 'Tag', name?: string | null, slug?: string | null, description?: string | null };

export type StuffPartsFragment = { __typename?: 'Stuff', title?: string | null, description?: string | null, published?: boolean | null, slug?: string | null, date?: string | null, tags?: Array<string | null> | null, picture?: string | null, iframe?: string | null, source?: string | null, body?: any | null };

export type GlobalQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GlobalQuery = { __typename?: 'Query', global: { __typename?: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'GlobalHeader', title?: string | null, linkTitle?: string | null } | null, footer?: { __typename: 'GlobalFooter', hideSocialNetworks?: boolean | null } | null, menu?: { __typename: 'GlobalMenu', links?: Array<{ __typename: 'GlobalMenuLinks', href?: string | null, label?: string | null } | null> | null } | null } };

export type GlobalConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<GlobalFilter>;
}>;


export type GlobalConnectionQuery = { __typename?: 'Query', globalConnection: { __typename?: 'GlobalConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'GlobalConnectionEdges', node?: { __typename?: 'Global', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, header?: { __typename: 'GlobalHeader', title?: string | null, linkTitle?: string | null } | null, footer?: { __typename: 'GlobalFooter', hideSocialNetworks?: boolean | null } | null, menu?: { __typename: 'GlobalMenu', links?: Array<{ __typename: 'GlobalMenuLinks', href?: string | null, label?: string | null } | null> | null } | null } | null } | null> | null } };

export type LandingPageQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type LandingPageQuery = { __typename?: 'Query', landingPage: { __typename?: 'LandingPage', id: string, title?: string | null, description?: string | null, published?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'LandingPageBlocksHero', href?: string | null, title?: string | null, description?: string | null } | { __typename: 'LandingPageBlocksFeature', href?: string | null, title?: string | null, description?: string | null, deco?: { __typename: 'LandingPageBlocksFeatureDeco', slant?: boolean | null, background?: string | null } | null } | null> | null } };

export type LandingPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<LandingPageFilter>;
}>;


export type LandingPageConnectionQuery = { __typename?: 'Query', landingPageConnection: { __typename?: 'LandingPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'LandingPageConnectionEdges', node?: { __typename?: 'LandingPage', id: string, title?: string | null, description?: string | null, published?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blocks?: Array<{ __typename: 'LandingPageBlocksHero', href?: string | null, title?: string | null, description?: string | null } | { __typename: 'LandingPageBlocksFeature', href?: string | null, title?: string | null, description?: string | null, deco?: { __typename: 'LandingPageBlocksFeatureDeco', slant?: boolean | null, background?: string | null } | null } | null> | null } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename?: 'Page', id: string, title?: string | null, description?: string | null, published?: boolean | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', node?: { __typename?: 'Page', id: string, title?: string | null, description?: string | null, published?: boolean | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type TagQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type TagQuery = { __typename?: 'Query', tag: { __typename?: 'Tag', id: string, name?: string | null, slug?: string | null, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type TagConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<TagFilter>;
}>;


export type TagConnectionQuery = { __typename?: 'Query', tagConnection: { __typename?: 'TagConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'TagConnectionEdges', node?: { __typename?: 'Tag', id: string, name?: string | null, slug?: string | null, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type StuffQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type StuffQuery = { __typename?: 'Query', stuff: { __typename?: 'Stuff', id: string, title?: string | null, description?: string | null, published?: boolean | null, slug?: string | null, date?: string | null, tags?: Array<string | null> | null, picture?: string | null, iframe?: string | null, source?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type StuffConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<StuffFilter>;
}>;


export type StuffConnectionQuery = { __typename?: 'Query', stuffConnection: { __typename?: 'StuffConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'StuffConnectionEdges', node?: { __typename?: 'Stuff', id: string, title?: string | null, description?: string | null, published?: boolean | null, slug?: string | null, date?: string | null, tags?: Array<string | null> | null, picture?: string | null, iframe?: string | null, source?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const GlobalPartsFragmentDoc = gql`
    fragment GlobalParts on Global {
  header {
    __typename
    title
    linkTitle
  }
  footer {
    __typename
    hideSocialNetworks
  }
  menu {
    __typename
    links {
      __typename
      href
      label
    }
  }
}
    `;
export const LandingPagePartsFragmentDoc = gql`
    fragment LandingPageParts on LandingPage {
  title
  description
  published
  blocks {
    __typename
    ... on LandingPageBlocksHero {
      href
      title
      description
    }
    ... on LandingPageBlocksFeature {
      href
      title
      description
      deco {
        __typename
        slant
        background
      }
    }
  }
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  title
  description
  published
  body
}
    `;
export const TagPartsFragmentDoc = gql`
    fragment TagParts on Tag {
  name
  slug
  description
}
    `;
export const StuffPartsFragmentDoc = gql`
    fragment StuffParts on Stuff {
  title
  description
  published
  slug
  date
  tags
  picture
  iframe
  source
  body
}
    `;
export const GlobalDocument = gql`
    query global($relativePath: String!) {
  global(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...GlobalParts
  }
}
    ${GlobalPartsFragmentDoc}`;
export const GlobalConnectionDocument = gql`
    query globalConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: GlobalFilter) {
  globalConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...GlobalParts
      }
    }
  }
}
    ${GlobalPartsFragmentDoc}`;
export const LandingPageDocument = gql`
    query landingPage($relativePath: String!) {
  landingPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...LandingPageParts
  }
}
    ${LandingPagePartsFragmentDoc}`;
export const LandingPageConnectionDocument = gql`
    query landingPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: LandingPageFilter) {
  landingPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...LandingPageParts
      }
    }
  }
}
    ${LandingPagePartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const TagDocument = gql`
    query tag($relativePath: String!) {
  tag(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...TagParts
  }
}
    ${TagPartsFragmentDoc}`;
export const TagConnectionDocument = gql`
    query tagConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: TagFilter) {
  tagConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...TagParts
      }
    }
  }
}
    ${TagPartsFragmentDoc}`;
export const StuffDocument = gql`
    query stuff($relativePath: String!) {
  stuff(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...StuffParts
  }
}
    ${StuffPartsFragmentDoc}`;
export const StuffConnectionDocument = gql`
    query stuffConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: StuffFilter) {
  stuffConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...StuffParts
      }
    }
  }
}
    ${StuffPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      global(variables: GlobalQueryVariables, options?: C): Promise<{data: GlobalQuery, variables: GlobalQueryVariables, query: string}> {
        return requester<{data: GlobalQuery, variables: GlobalQueryVariables, query: string}, GlobalQueryVariables>(GlobalDocument, variables, options);
      },
    globalConnection(variables?: GlobalConnectionQueryVariables, options?: C): Promise<{data: GlobalConnectionQuery, variables: GlobalConnectionQueryVariables, query: string}> {
        return requester<{data: GlobalConnectionQuery, variables: GlobalConnectionQueryVariables, query: string}, GlobalConnectionQueryVariables>(GlobalConnectionDocument, variables, options);
      },
    landingPage(variables: LandingPageQueryVariables, options?: C): Promise<{data: LandingPageQuery, variables: LandingPageQueryVariables, query: string}> {
        return requester<{data: LandingPageQuery, variables: LandingPageQueryVariables, query: string}, LandingPageQueryVariables>(LandingPageDocument, variables, options);
      },
    landingPageConnection(variables?: LandingPageConnectionQueryVariables, options?: C): Promise<{data: LandingPageConnectionQuery, variables: LandingPageConnectionQueryVariables, query: string}> {
        return requester<{data: LandingPageConnectionQuery, variables: LandingPageConnectionQueryVariables, query: string}, LandingPageConnectionQueryVariables>(LandingPageConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    tag(variables: TagQueryVariables, options?: C): Promise<{data: TagQuery, variables: TagQueryVariables, query: string}> {
        return requester<{data: TagQuery, variables: TagQueryVariables, query: string}, TagQueryVariables>(TagDocument, variables, options);
      },
    tagConnection(variables?: TagConnectionQueryVariables, options?: C): Promise<{data: TagConnectionQuery, variables: TagConnectionQueryVariables, query: string}> {
        return requester<{data: TagConnectionQuery, variables: TagConnectionQueryVariables, query: string}, TagConnectionQueryVariables>(TagConnectionDocument, variables, options);
      },
    stuff(variables: StuffQueryVariables, options?: C): Promise<{data: StuffQuery, variables: StuffQueryVariables, query: string}> {
        return requester<{data: StuffQuery, variables: StuffQueryVariables, query: string}, StuffQueryVariables>(StuffDocument, variables, options);
      },
    stuffConnection(variables?: StuffConnectionQueryVariables, options?: C): Promise<{data: StuffConnectionQuery, variables: StuffConnectionQueryVariables, query: string}> {
        return requester<{data: StuffConnectionQuery, variables: StuffConnectionQueryVariables, query: string}, StuffConnectionQueryVariables>(StuffConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  