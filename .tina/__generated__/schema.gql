# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
  landingPage(relativePath: String): LandingPage!
  landingPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: LandingPageFilter): LandingPageConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  tag(relativePath: String): Tag!
  tagConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TagFilter): TagConnection!
  stuff(relativePath: String): Stuff!
  stuffConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: StuffFilter): StuffConnection!
}

input DocumentFilter {
  global: GlobalFilter
  landingPage: LandingPageFilter
  page: PageFilter
  tag: TagFilter
  stuff: StuffFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Global | LandingPage | Page | Tag | Stuff

type GlobalHeader {
  title: String
  linkTitle: String
}

type GlobalFooter {
  hideSocialNetworks: Boolean
}

type GlobalMenuLinks {
  href: String
  label: String
}

type GlobalMenu {
  links: [GlobalMenuLinks]
}

type Global implements Node & Document {
  header: GlobalHeader
  footer: GlobalFooter
  menu: GlobalMenu
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input GlobalHeaderFilter {
  title: StringFilter
  linkTitle: StringFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input GlobalFooterFilter {
  hideSocialNetworks: BooleanFilter
}

input GlobalMenuLinksFilter {
  href: StringFilter
  label: StringFilter
}

input GlobalMenuFilter {
  links: GlobalMenuLinksFilter
}

input GlobalFilter {
  header: GlobalHeaderFilter
  footer: GlobalFooterFilter
  menu: GlobalMenuFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type LandingPageBlocksHero {
  href: String
  title: String
  description: String
}

type LandingPageBlocksFeatureDeco {
  slant: Boolean
  background: String
}

type LandingPageBlocksFeature {
  href: String
  title: String
  description: String
  deco: LandingPageBlocksFeatureDeco
}

union LandingPageBlocks = LandingPageBlocksHero | LandingPageBlocksFeature

type LandingPage implements Node & Document {
  title: String
  description: String
  published: Boolean
  blocks: [LandingPageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input LandingPageBlocksHeroFilter {
  href: StringFilter
  title: StringFilter
  description: StringFilter
}

input LandingPageBlocksFeatureDecoFilter {
  slant: BooleanFilter
  background: StringFilter
}

input LandingPageBlocksFeatureFilter {
  href: StringFilter
  title: StringFilter
  description: StringFilter
  deco: LandingPageBlocksFeatureDecoFilter
}

input LandingPageBlocksFilter {
  hero: LandingPageBlocksHeroFilter
  feature: LandingPageBlocksFeatureFilter
}

input LandingPageFilter {
  title: StringFilter
  description: StringFilter
  published: BooleanFilter
  blocks: LandingPageBlocksFilter
}

type LandingPageConnectionEdges {
  cursor: String!
  node: LandingPage
}

type LandingPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [LandingPageConnectionEdges]
}

type Page implements Node & Document {
  title: String
  description: String
  published: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  published: BooleanFilter
  body: RichTextFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Tag implements Node & Document {
  name: String
  slug: String
  description: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input TagFilter {
  name: StringFilter
  slug: StringFilter
  description: StringFilter
}

type TagConnectionEdges {
  cursor: String!
  node: Tag
}

type TagConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TagConnectionEdges]
}

type Stuff implements Node & Document {
  title: String
  description: String
  published: Boolean
  slug: String
  date: String
  tags: [String]
  picture: String
  iframe: String
  source: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input StuffFilter {
  title: StringFilter
  description: StringFilter
  published: BooleanFilter
  slug: StringFilter
  date: DatetimeFilter
  tags: StringFilter
  picture: ImageFilter
  iframe: StringFilter
  source: StringFilter
  body: RichTextFilter
}

type StuffConnectionEdges {
  cursor: String!
  node: Stuff
}

type StuffConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [StuffConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updateLandingPage(relativePath: String!, params: LandingPageMutation!): LandingPage!
  createLandingPage(relativePath: String!, params: LandingPageMutation!): LandingPage!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateTag(relativePath: String!, params: TagMutation!): Tag!
  createTag(relativePath: String!, params: TagMutation!): Tag!
  updateStuff(relativePath: String!, params: StuffMutation!): Stuff!
  createStuff(relativePath: String!, params: StuffMutation!): Stuff!
}

input DocumentMutation {
  global: GlobalMutation
  landingPage: LandingPageMutation
  page: PageMutation
  tag: TagMutation
  stuff: StuffMutation
}

input GlobalHeaderMutation {
  title: String
  linkTitle: String
}

input GlobalFooterMutation {
  hideSocialNetworks: Boolean
}

input GlobalMenuLinksMutation {
  href: String
  label: String
}

input GlobalMenuMutation {
  links: [GlobalMenuLinksMutation]
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
  menu: GlobalMenuMutation
}

input LandingPageBlocksHeroMutation {
  href: String
  title: String
  description: String
}

input LandingPageBlocksFeatureDecoMutation {
  slant: Boolean
  background: String
}

input LandingPageBlocksFeatureMutation {
  href: String
  title: String
  description: String
  deco: LandingPageBlocksFeatureDecoMutation
}

input LandingPageBlocksMutation {
  hero: LandingPageBlocksHeroMutation
  feature: LandingPageBlocksFeatureMutation
}

input LandingPageMutation {
  title: String
  description: String
  published: Boolean
  blocks: [LandingPageBlocksMutation]
}

input PageMutation {
  title: String
  description: String
  published: Boolean
  body: JSON
}

input TagMutation {
  name: String
  slug: String
  description: String
}

input StuffMutation {
  title: String
  description: String
  published: Boolean
  slug: String
  date: String
  tags: [String]
  picture: String
  iframe: String
  source: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  